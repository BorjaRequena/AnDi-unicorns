# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_analysis.ipynb (unless otherwise specified).

__all__ = ['plot_conf_mat', 'get_conf_mat']

# Cell
import torch
import numpy as np
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
from tqdm.auto import tqdm

# Cell
def plot_conf_mat(model, dl, conf=None, fs=(7, 7)):
    "Plots confusion matrix of `model` given a `DataLoader`."
    conf = get_conf_mat(model, dl) if conf is None else conf
    fig, ax = plt.subplots(figsize=fs)
    ax.matshow(conf, cmap='plasma')
    for (i, j), z in np.ndenumerate(conf):
        if i == j: c = 'k'
        else:      c = 'w'
        ax.text(j, i, '{:0.3f}'.format(z), ha='center', va='center', fontsize=16, color=c)
    return conf

def get_conf_mat(model, dl):
    "Computes confusion matrix of `model` given a `DataLoader`."
    if hasattr(model, 'rnn'): out = [[model(xb)[0].softmax(1).argmax(1).detach().cpu(), yb.cpu()] for xb, yb in dl]
    else:                     out = [[model(xb).softmax(1).argmax(1).detach().cpu(), yb.cpu()] for xb, yb in dl]
    preds, true = torch.cat([o[0] for o in out]), torch.cat([o[1] for o in out])
    np_preds, np_y = np.array(preds), np.array(true)
    return confusion_matrix(np_y, np_preds, normalize='true')