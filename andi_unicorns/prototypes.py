# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_prototypes.ipynb (unless otherwise specified).

__all__ = ['CNNonRNN']

# Cell
from fastai.vision.all import *
from fastai.text.all import *

from .models import *
from .data import *
from .utils import save_model, load_model

# Cell
class CNNonRNN(Module):
    def __init__(self, dim, vocab_sz=1, rnn_h=750, rnn_layers=2, in_p=0.4, rnn_p=0.4, rnn_wp=0.1, bidir=False, layer='GRU',
                cnn_h=500, cnn_exp=1, cnn_layers=[1, 1, 1], cnn_op=0.3, linear_layers=[200], ps=None, yrange=(0, 2.05),
                 act=True, norm=False):
        self.rnn = RegLSTM(dim, rnn_h, rnn_layers, input_p=in_p, hidden_p=rnn_p, weight_p=rnn_wp, bidir=bidir, layer=layer)
        self.cnn = CNNLin(rnn_h, vocab_sz=vocab_sz, h_size=cnn_h, exp=cnn_exp, layers=cnn_layers, out_p=cnn_op,
                          linear_layers=linear_layers, ps=ps, act=act, norm=norm, yrange=yrange)
        self.blocks = [self.rnn, *self.cnn.blocks]

    def forward(self, x):
        mask = x == 0
        x = self.rnn(x)
        x = x.masked_fill(mask, 0)
        return self.cnn(x)